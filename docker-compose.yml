version: '3.8'

services:
  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - postgres
    networks:
      - task-eagle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Banco de dados PostgreSQL (para desenvolvimento local)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: task_eagle_eye
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database-schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - task-eagle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - task-eagle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Proxy (para desenvolvimento)
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - task-eagle-network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  task-eagle-network:
    driver: bridge

# Configurações para desenvolvimento
# Para usar: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml (desenvolvimento)
version: '3.8'

services:
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - task-eagle-network
    command: npm run dev
    profiles:
      - dev

  # Servidor de desenvolvimento com hot reload
  dev-server:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    networks:
      - task-eagle-network
    profiles:
      - dev