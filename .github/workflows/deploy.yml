name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Job 1: Pre-deploy checks
  pre-deploy:
    name: 🔍 Pre-deploy Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 Check deployment conditions
        id: check
        run: |
          echo "🔍 Checking deployment conditions..."
          
          # Determinar ambiente
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          
          # Extrair versão
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          fi
          
          # Verificar se deve fazer deploy
          SHOULD_DEPLOY="true"
          if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            # Verificar se há commits recentes que não sejam de merge
            RECENT_COMMITS=$(git log --oneline -5 --no-merges)
            if [[ -z "$RECENT_COMMITS" ]]; then
              echo "⚠️ No recent commits found, skipping deployment"
              SHOULD_DEPLOY="false"
            fi
          fi
          
          echo "Environment: $ENVIRONMENT"
          echo "Version: $VERSION"
          echo "Should Deploy: $SHOULD_DEPLOY"
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # Job 2: Build para produção
  build:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    needs: [pre-deploy]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🧪 Run tests (if not forced)
        if: github.event.inputs.force_deploy != 'true'
        run: pnpm test
        
      - name: 🔍 Run linting (if not forced)
        if: github.event.inputs.force_deploy != 'true'
        run: pnpm lint
        
      - name: 🏗️ Build for production
        run: |
          echo "Building for ${{ needs.pre-deploy.outputs.environment }}..."
          pnpm build
          
      - name: 📊 Generate build info
        run: |
          echo "{
            \"version\": \"${{ needs.pre-deploy.outputs.version }}\",
            \"buildTime\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"commit\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref_name }}\",
            \"environment\": \"${{ needs.pre-deploy.outputs.environment }}\"
          }" > dist/build-info.json
          
      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: dist/
          retention-days: 30

  # Job 3: Deploy para Vercel
  deploy-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [pre-deploy, build]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    environment:
      name: ${{ needs.pre-deploy.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          path: dist/
          
      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: ${{ needs.pre-deploy.outputs.environment == 'production' && '--prod' || '' }}
          
      - name: 📊 Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.preview-url }}';
            const environment = '${{ needs.pre-deploy.outputs.environment }}';
            const version = '${{ needs.pre-deploy.outputs.version }}';
            
            const comment = `## 🚀 Deployment Successful!
            
            **Environment:** \`${environment}\`
            **Version:** \`${version}\`
            **URL:** ${deploymentUrl}
            
            ### 🔗 Quick Links
            - [🌐 Live Preview](${deploymentUrl})
            - [📊 Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [📈 Vercel Dashboard](https://vercel.com/dashboard)
            
            *Deployed by RepoGuardian AI 🤖*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 4: Testes de smoke após deploy
  smoke-tests:
    name: 🧪 Smoke Tests
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-vercel]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Running smoke tests against deployed application..."
          
          # Aguardar um pouco para o deploy se estabilizar
          sleep 30
          
          # Teste básico de conectividade
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.url }}"
          if [[ -n "$DEPLOY_URL" ]]; then
            echo "Testing URL: $DEPLOY_URL"
            
            # Verificar se a página carrega
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL")
            if [[ "$HTTP_STATUS" == "200" ]]; then
              echo "✅ Application is responding (HTTP $HTTP_STATUS)"
            else
              echo "❌ Application is not responding (HTTP $HTTP_STATUS)"
              exit 1
            fi
            
            # Verificar se contém elementos esperados
            CONTENT=$(curl -s "$DEPLOY_URL")
            if echo "$CONTENT" | grep -q "Eisenhower"; then
              echo "✅ Application content looks correct"
            else
              echo "❌ Application content seems incorrect"
              exit 1
            fi
          else
            echo "⚠️ No deployment URL found, skipping smoke tests"
          fi

  # Job 5: Notificações e cleanup
  post-deploy:
    name: 📢 Post-deploy Actions
    runs-on: ubuntu-latest
    needs: [pre-deploy, build, deploy-vercel, smoke-tests]
    if: always() && needs.pre-deploy.outputs.should_deploy == 'true'
    
    steps:
      - name: 📊 Deployment status
        run: |
          echo "📊 Deployment Summary:"
          echo "Environment: ${{ needs.pre-deploy.outputs.environment }}"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Deploy: ${{ needs.deploy-vercel.result }}"
          echo "Smoke Tests: ${{ needs.smoke-tests.result }}"
          
      - name: ✅ Success notification
        if: needs.deploy-vercel.result == 'success' && needs.smoke-tests.result == 'success'
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Version ${{ needs.pre-deploy.outputs.version }} is now live in ${{ needs.pre-deploy.outputs.environment }}"
          
      - name: ❌ Failure notification
        if: needs.deploy-vercel.result == 'failure' || needs.smoke-tests.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs and take appropriate action."
          exit 1
          
      - name: 🧹 Cleanup old artifacts
        run: |
          echo "🧹 Cleaning up old build artifacts..."
          # Aqui você pode adicionar lógica para limpar artifacts antigos
          echo "Cleanup completed"

  # Job 6: Update deployment status
  update-status:
    name: 📊 Update Status
    runs-on: ubuntu-latest
    needs: [pre-deploy, post-deploy]
    if: always() && needs.pre-deploy.outputs.should_deploy == 'true'
    
    steps:
      - name: 📊 Create deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentStatus = '${{ needs.post-deploy.result }}' === 'success' ? 'success' : 'failure';
            const environment = '${{ needs.pre-deploy.outputs.environment }}';
            const version = '${{ needs.pre-deploy.outputs.version }}';
            
            // Criar um deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: deploymentStatus,
              description: `Deployment ${deploymentStatus} for ${environment} (${version})`,
              environment: environment,
              auto_inactive: false
            });
            
            console.log(`Deployment status updated: ${deploymentStatus}`);