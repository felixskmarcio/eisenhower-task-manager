name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Lint e Type Check
  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Run ESLint
        run: pnpm lint
        
      - name: 🔍 Run TypeScript check
        run: pnpm type-check
        
      - name: 📊 Upload lint results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: |
            eslint-report.json
            tsc-report.txt

  # Job 2: Testes
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🧪 Run tests
        run: pnpm test:coverage
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  # Job 3: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🏗️ Build application
        run: pnpm build
        
      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Job 4: Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🔒 Run security audit
        run: pnpm audit --audit-level moderate
        
      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Job 5: Dependency Review (apenas para PRs)
  dependency-review:
    name: 🔍 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, ISC

  # Job 6: Performance Budget (apenas para PRs)
  performance:
    name: ⚡ Performance Budget
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: dist/
          
      - name: ⚡ Bundle size analysis
        run: |
          echo "📊 Analyzing bundle size..."
          du -sh dist/
          find dist/ -name "*.js" -exec du -h {} \; | sort -hr
          
      - name: 📊 Comment bundle size
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            const bundleSize = execSync('du -sh dist/').toString().trim();
            const jsFiles = execSync('find dist/ -name "*.js" -exec du -h {} \\; | sort -hr | head -5').toString().trim();
            
            const comment = `## 📊 Bundle Size Analysis
            
            **Total bundle size:** \`${bundleSize}\`
            
            **Largest JS files:**
            \`\`\`
            ${jsFiles}
            \`\`\`
            
            *Generated by RepoGuardian AI 🤖*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 7: Status Summary
  ci-status:
    name: ✅ CI Status
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security]
    if: always()
    
    steps:
      - name: ✅ All checks passed
        if: ${{ needs.lint-and-typecheck.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Lint & Type Check: PASSED"
          echo "✅ Tests: PASSED"
          echo "✅ Build: PASSED"
          echo "✅ Security: PASSED"
          
      - name: ❌ Some checks failed
        if: ${{ needs.lint-and-typecheck.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success' || needs.security.result != 'success' }}
        run: |
          echo "❌ Some CI checks failed!"
          echo "Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1