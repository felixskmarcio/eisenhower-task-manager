
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Usar variáveis de ambiente para maior segurança
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Verificar se as variáveis de ambiente estão definidas
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('Erro: Variáveis de ambiente do Supabase não definidas. Verifique o arquivo .env');
}

// Configurações de segurança para o cliente Supabase
const supabaseOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    storage: localStorage,
    storageKey: 'sb-xusvqzlusdxirznsyrzo-auth-token',
  },
  global: {
    // Configurações globais para aumentar segurança nas requisições
    headers: {
      'X-Client-Info': 'eisenhower-task-manager',
    },
  },
  // Limite de tempo de requisição para evitar ataques de exaustão
  realtime: {
    timeout: 30000, // 30 segundos
  },
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  supabaseOptions
);

// Função auxiliar para limpar completamente o armazenamento do Supabase
export const clearSupabaseStorage = () => {
  try {
    // Remover token específico do Supabase
    localStorage.removeItem('sb-xusvqzlusdxirznsyrzo-auth-token');
    sessionStorage.removeItem('sb-xusvqzlusdxirznsyrzo-auth-token');
    
    // Remover outros tokens possíveis
    const allStorageKeys = Object.keys(localStorage);
    const supabaseKeys = allStorageKeys.filter(key => 
      key.includes('supabase') || 
      key.startsWith('sb-') || 
      key.includes('auth')
    );
    
    supabaseKeys.forEach(key => {
      localStorage.removeItem(key);
    });
    
    // Remover explicitamente as configurações
    localStorage.removeItem('supabaseUrl');
    localStorage.removeItem('supabaseKey');
    
    // Remover tokens de sessão
    const sessionKeys = Object.keys(sessionStorage);
    const supabaseSessionKeys = sessionKeys.filter(key => 
      key.includes('supabase') || 
      key.startsWith('sb-') || 
      key.includes('auth')
    );
    
    supabaseSessionKeys.forEach(key => {
      sessionStorage.removeItem(key);
    });
    
    return true;
  } catch (error) {
    console.error('Erro ao limpar armazenamento do Supabase:', error);
    return false;
  }
};
